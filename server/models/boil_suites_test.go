// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DataLogs", testDataLogs)
	t.Run("DeviceTypes", testDeviceTypes)
	t.Run("Sensors", testSensors)
	t.Run("TrackedDevices", testTrackedDevices)
}

func TestDelete(t *testing.T) {
	t.Run("DataLogs", testDataLogsDelete)
	t.Run("DeviceTypes", testDeviceTypesDelete)
	t.Run("Sensors", testSensorsDelete)
	t.Run("TrackedDevices", testTrackedDevicesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DataLogs", testDataLogsQueryDeleteAll)
	t.Run("DeviceTypes", testDeviceTypesQueryDeleteAll)
	t.Run("Sensors", testSensorsQueryDeleteAll)
	t.Run("TrackedDevices", testTrackedDevicesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DataLogs", testDataLogsSliceDeleteAll)
	t.Run("DeviceTypes", testDeviceTypesSliceDeleteAll)
	t.Run("Sensors", testSensorsSliceDeleteAll)
	t.Run("TrackedDevices", testTrackedDevicesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DataLogs", testDataLogsExists)
	t.Run("DeviceTypes", testDeviceTypesExists)
	t.Run("Sensors", testSensorsExists)
	t.Run("TrackedDevices", testTrackedDevicesExists)
}

func TestFind(t *testing.T) {
	t.Run("DataLogs", testDataLogsFind)
	t.Run("DeviceTypes", testDeviceTypesFind)
	t.Run("Sensors", testSensorsFind)
	t.Run("TrackedDevices", testTrackedDevicesFind)
}

func TestBind(t *testing.T) {
	t.Run("DataLogs", testDataLogsBind)
	t.Run("DeviceTypes", testDeviceTypesBind)
	t.Run("Sensors", testSensorsBind)
	t.Run("TrackedDevices", testTrackedDevicesBind)
}

func TestOne(t *testing.T) {
	t.Run("DataLogs", testDataLogsOne)
	t.Run("DeviceTypes", testDeviceTypesOne)
	t.Run("Sensors", testSensorsOne)
	t.Run("TrackedDevices", testTrackedDevicesOne)
}

func TestAll(t *testing.T) {
	t.Run("DataLogs", testDataLogsAll)
	t.Run("DeviceTypes", testDeviceTypesAll)
	t.Run("Sensors", testSensorsAll)
	t.Run("TrackedDevices", testTrackedDevicesAll)
}

func TestCount(t *testing.T) {
	t.Run("DataLogs", testDataLogsCount)
	t.Run("DeviceTypes", testDeviceTypesCount)
	t.Run("Sensors", testSensorsCount)
	t.Run("TrackedDevices", testTrackedDevicesCount)
}

func TestHooks(t *testing.T) {
	t.Run("DataLogs", testDataLogsHooks)
	t.Run("DeviceTypes", testDeviceTypesHooks)
	t.Run("Sensors", testSensorsHooks)
	t.Run("TrackedDevices", testTrackedDevicesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DataLogs", testDataLogsInsert)
	t.Run("DataLogs", testDataLogsInsertWhitelist)
	t.Run("DeviceTypes", testDeviceTypesInsert)
	t.Run("DeviceTypes", testDeviceTypesInsertWhitelist)
	t.Run("Sensors", testSensorsInsert)
	t.Run("Sensors", testSensorsInsertWhitelist)
	t.Run("TrackedDevices", testTrackedDevicesInsert)
	t.Run("TrackedDevices", testTrackedDevicesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DataLogToTrackedDeviceUsingTrackedDevice", testDataLogToOneTrackedDeviceUsingTrackedDevice)
	t.Run("SensorToTrackedDeviceUsingTrackedDevice", testSensorToOneTrackedDeviceUsingTrackedDevice)
	t.Run("TrackedDeviceToDeviceTypeUsingDeviceType", testTrackedDeviceToOneDeviceTypeUsingDeviceType)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DeviceTypeToTrackedDevices", testDeviceTypeToManyTrackedDevices)
	t.Run("TrackedDeviceToDataLogs", testTrackedDeviceToManyDataLogs)
	t.Run("TrackedDeviceToSensors", testTrackedDeviceToManySensors)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DataLogToTrackedDeviceUsingDataLogs", testDataLogToOneSetOpTrackedDeviceUsingTrackedDevice)
	t.Run("SensorToTrackedDeviceUsingSensors", testSensorToOneSetOpTrackedDeviceUsingTrackedDevice)
	t.Run("TrackedDeviceToDeviceTypeUsingTrackedDevices", testTrackedDeviceToOneSetOpDeviceTypeUsingDeviceType)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SensorToTrackedDeviceUsingSensors", testSensorToOneRemoveOpTrackedDeviceUsingTrackedDevice)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DeviceTypeToTrackedDevices", testDeviceTypeToManyAddOpTrackedDevices)
	t.Run("TrackedDeviceToDataLogs", testTrackedDeviceToManyAddOpDataLogs)
	t.Run("TrackedDeviceToSensors", testTrackedDeviceToManyAddOpSensors)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("TrackedDeviceToSensors", testTrackedDeviceToManySetOpSensors)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("TrackedDeviceToSensors", testTrackedDeviceToManyRemoveOpSensors)
}

func TestReload(t *testing.T) {
	t.Run("DataLogs", testDataLogsReload)
	t.Run("DeviceTypes", testDeviceTypesReload)
	t.Run("Sensors", testSensorsReload)
	t.Run("TrackedDevices", testTrackedDevicesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DataLogs", testDataLogsReloadAll)
	t.Run("DeviceTypes", testDeviceTypesReloadAll)
	t.Run("Sensors", testSensorsReloadAll)
	t.Run("TrackedDevices", testTrackedDevicesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DataLogs", testDataLogsSelect)
	t.Run("DeviceTypes", testDeviceTypesSelect)
	t.Run("Sensors", testSensorsSelect)
	t.Run("TrackedDevices", testTrackedDevicesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DataLogs", testDataLogsUpdate)
	t.Run("DeviceTypes", testDeviceTypesUpdate)
	t.Run("Sensors", testSensorsUpdate)
	t.Run("TrackedDevices", testTrackedDevicesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DataLogs", testDataLogsSliceUpdateAll)
	t.Run("DeviceTypes", testDeviceTypesSliceUpdateAll)
	t.Run("Sensors", testSensorsSliceUpdateAll)
	t.Run("TrackedDevices", testTrackedDevicesSliceUpdateAll)
}
