// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTrackedDevices(t *testing.T) {
	t.Parallel()

	query := TrackedDevices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTrackedDevicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrackedDevicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TrackedDevices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrackedDevicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackedDeviceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrackedDevicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TrackedDeviceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TrackedDevice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TrackedDeviceExists to return true, but got false.")
	}
}

func testTrackedDevicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	trackedDeviceFound, err := FindTrackedDevice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if trackedDeviceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTrackedDevicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TrackedDevices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTrackedDevicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TrackedDevices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTrackedDevicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	trackedDeviceOne := &TrackedDevice{}
	trackedDeviceTwo := &TrackedDevice{}
	if err = randomize.Struct(seed, trackedDeviceOne, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}
	if err = randomize.Struct(seed, trackedDeviceTwo, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackedDeviceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackedDeviceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TrackedDevices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTrackedDevicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	trackedDeviceOne := &TrackedDevice{}
	trackedDeviceTwo := &TrackedDevice{}
	if err = randomize.Struct(seed, trackedDeviceOne, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}
	if err = randomize.Struct(seed, trackedDeviceTwo, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = trackedDeviceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = trackedDeviceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func trackedDeviceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func trackedDeviceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TrackedDevice) error {
	*o = TrackedDevice{}
	return nil
}

func testTrackedDevicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TrackedDevice{}
	o := &TrackedDevice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TrackedDevice object: %s", err)
	}

	AddTrackedDeviceHook(boil.BeforeInsertHook, trackedDeviceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	trackedDeviceBeforeInsertHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.AfterInsertHook, trackedDeviceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	trackedDeviceAfterInsertHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.AfterSelectHook, trackedDeviceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	trackedDeviceAfterSelectHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.BeforeUpdateHook, trackedDeviceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	trackedDeviceBeforeUpdateHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.AfterUpdateHook, trackedDeviceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	trackedDeviceAfterUpdateHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.BeforeDeleteHook, trackedDeviceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	trackedDeviceBeforeDeleteHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.AfterDeleteHook, trackedDeviceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	trackedDeviceAfterDeleteHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.BeforeUpsertHook, trackedDeviceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	trackedDeviceBeforeUpsertHooks = []TrackedDeviceHook{}

	AddTrackedDeviceHook(boil.AfterUpsertHook, trackedDeviceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	trackedDeviceAfterUpsertHooks = []TrackedDeviceHook{}
}

func testTrackedDevicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrackedDevicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(trackedDeviceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrackedDeviceToManyDataLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c DataLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dataLogDBTypes, false, dataLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dataLogDBTypes, false, dataLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TrackedDeviceID = a.ID
	c.TrackedDeviceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DataLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TrackedDeviceID == b.TrackedDeviceID {
			bFound = true
		}
		if v.TrackedDeviceID == c.TrackedDeviceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackedDeviceSlice{&a}
	if err = a.L.LoadDataLogs(ctx, tx, false, (*[]*TrackedDevice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DataLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DataLogs = nil
	if err = a.L.LoadDataLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DataLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackedDeviceToManySensors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c Sensor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sensorDBTypes, false, sensorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sensorDBTypes, false, sensorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TrackedDeviceID, a.ID)
	queries.Assign(&c.TrackedDeviceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Sensors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TrackedDeviceID, b.TrackedDeviceID) {
			bFound = true
		}
		if queries.Equal(v.TrackedDeviceID, c.TrackedDeviceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TrackedDeviceSlice{&a}
	if err = a.L.LoadSensors(ctx, tx, false, (*[]*TrackedDevice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sensors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Sensors = nil
	if err = a.L.LoadSensors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sensors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTrackedDeviceToManyAddOpDataLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c, d, e DataLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, false, strmangle.SetComplement(trackedDevicePrimaryKeyColumns, trackedDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DataLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dataLogDBTypes, false, strmangle.SetComplement(dataLogPrimaryKeyColumns, dataLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DataLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDataLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TrackedDeviceID {
			t.Error("foreign key was wrong value", a.ID, first.TrackedDeviceID)
		}
		if a.ID != second.TrackedDeviceID {
			t.Error("foreign key was wrong value", a.ID, second.TrackedDeviceID)
		}

		if first.R.TrackedDevice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TrackedDevice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DataLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DataLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DataLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTrackedDeviceToManyAddOpSensors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c, d, e Sensor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, false, strmangle.SetComplement(trackedDevicePrimaryKeyColumns, trackedDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Sensor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sensorDBTypes, false, strmangle.SetComplement(sensorPrimaryKeyColumns, sensorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Sensor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSensors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TrackedDeviceID) {
			t.Error("foreign key was wrong value", a.ID, first.TrackedDeviceID)
		}
		if !queries.Equal(a.ID, second.TrackedDeviceID) {
			t.Error("foreign key was wrong value", a.ID, second.TrackedDeviceID)
		}

		if first.R.TrackedDevice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TrackedDevice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Sensors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Sensors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Sensors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrackedDeviceToManySetOpSensors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c, d, e Sensor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, false, strmangle.SetComplement(trackedDevicePrimaryKeyColumns, trackedDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Sensor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sensorDBTypes, false, strmangle.SetComplement(sensorPrimaryKeyColumns, sensorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSensors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sensors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSensors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sensors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackedDeviceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackedDeviceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TrackedDeviceID) {
		t.Error("foreign key was wrong value", a.ID, d.TrackedDeviceID)
	}
	if !queries.Equal(a.ID, e.TrackedDeviceID) {
		t.Error("foreign key was wrong value", a.ID, e.TrackedDeviceID)
	}

	if b.R.TrackedDevice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TrackedDevice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TrackedDevice != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TrackedDevice != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Sensors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Sensors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTrackedDeviceToManyRemoveOpSensors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c, d, e Sensor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, false, strmangle.SetComplement(trackedDevicePrimaryKeyColumns, trackedDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Sensor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sensorDBTypes, false, strmangle.SetComplement(sensorPrimaryKeyColumns, sensorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSensors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Sensors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSensors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Sensors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TrackedDeviceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TrackedDeviceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TrackedDevice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TrackedDevice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TrackedDevice != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TrackedDevice != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Sensors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Sensors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Sensors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTrackedDeviceToOneDeviceTypeUsingDeviceType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TrackedDevice
	var foreign DeviceType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deviceTypeDBTypes, false, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeviceTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DeviceType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TrackedDeviceSlice{&local}
	if err = local.L.LoadDeviceType(ctx, tx, false, (*[]*TrackedDevice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DeviceType = nil
	if err = local.L.LoadDeviceType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTrackedDeviceToOneSetOpDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TrackedDevice
	var b, c DeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, trackedDeviceDBTypes, false, strmangle.SetComplement(trackedDevicePrimaryKeyColumns, trackedDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deviceTypeDBTypes, false, strmangle.SetComplement(deviceTypePrimaryKeyColumns, deviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deviceTypeDBTypes, false, strmangle.SetComplement(deviceTypePrimaryKeyColumns, deviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DeviceType{&b, &c} {
		err = a.SetDeviceType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DeviceType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TrackedDevices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeviceTypeID != x.ID {
			t.Error("foreign key was wrong value", a.DeviceTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeviceTypeID))
		reflect.Indirect(reflect.ValueOf(&a.DeviceTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DeviceTypeID != x.ID {
			t.Error("foreign key was wrong value", a.DeviceTypeID, x.ID)
		}
	}
}

func testTrackedDevicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTrackedDevicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TrackedDeviceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTrackedDevicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TrackedDevices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	trackedDeviceDBTypes = map[string]string{`ID`: `bigint`, `DeviceTypeID`: `bigint`, `DeviceLocation`: `character varying`}
	_                    = bytes.MinRead
)

func testTrackedDevicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(trackedDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(trackedDeviceAllColumns) == len(trackedDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDevicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTrackedDevicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(trackedDeviceAllColumns) == len(trackedDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TrackedDevice{}
	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, trackedDeviceDBTypes, true, trackedDevicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(trackedDeviceAllColumns, trackedDevicePrimaryKeyColumns) {
		fields = trackedDeviceAllColumns
	} else {
		fields = strmangle.SetComplement(
			trackedDeviceAllColumns,
			trackedDevicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TrackedDeviceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTrackedDevicesUpsert(t *testing.T) {
	t.Parallel()

	if len(trackedDeviceAllColumns) == len(trackedDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TrackedDevice{}
	if err = randomize.Struct(seed, &o, trackedDeviceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TrackedDevice: %s", err)
	}

	count, err := TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, trackedDeviceDBTypes, false, trackedDevicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TrackedDevice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TrackedDevice: %s", err)
	}

	count, err = TrackedDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
