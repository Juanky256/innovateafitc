// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TrackedDevice is an object representing the database table.
type TrackedDevice struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceTypeID   int64       `boil:"device_type_id" json:"device_type_id" toml:"device_type_id" yaml:"device_type_id"`
	DeviceLocation null.String `boil:"device_location" json:"device_location,omitempty" toml:"device_location" yaml:"device_location,omitempty"`

	R *trackedDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trackedDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrackedDeviceColumns = struct {
	ID             string
	DeviceTypeID   string
	DeviceLocation string
}{
	ID:             "id",
	DeviceTypeID:   "device_type_id",
	DeviceLocation: "device_location",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TrackedDeviceWhere = struct {
	ID             whereHelperint64
	DeviceTypeID   whereHelperint64
	DeviceLocation whereHelpernull_String
}{
	ID:             whereHelperint64{field: "\"tracked_device\".\"id\""},
	DeviceTypeID:   whereHelperint64{field: "\"tracked_device\".\"device_type_id\""},
	DeviceLocation: whereHelpernull_String{field: "\"tracked_device\".\"device_location\""},
}

// TrackedDeviceRels is where relationship names are stored.
var TrackedDeviceRels = struct {
	DeviceType string
	DataLogs   string
	Sensors    string
}{
	DeviceType: "DeviceType",
	DataLogs:   "DataLogs",
	Sensors:    "Sensors",
}

// trackedDeviceR is where relationships are stored.
type trackedDeviceR struct {
	DeviceType *DeviceType
	DataLogs   DataLogSlice
	Sensors    SensorSlice
}

// NewStruct creates a new relationship struct
func (*trackedDeviceR) NewStruct() *trackedDeviceR {
	return &trackedDeviceR{}
}

// trackedDeviceL is where Load methods for each relationship are stored.
type trackedDeviceL struct{}

var (
	trackedDeviceAllColumns            = []string{"id", "device_type_id", "device_location"}
	trackedDeviceColumnsWithoutDefault = []string{"device_type_id", "device_location"}
	trackedDeviceColumnsWithDefault    = []string{"id"}
	trackedDevicePrimaryKeyColumns     = []string{"id"}
)

type (
	// TrackedDeviceSlice is an alias for a slice of pointers to TrackedDevice.
	// This should generally be used opposed to []TrackedDevice.
	TrackedDeviceSlice []*TrackedDevice
	// TrackedDeviceHook is the signature for custom TrackedDevice hook methods
	TrackedDeviceHook func(context.Context, boil.ContextExecutor, *TrackedDevice) error

	trackedDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trackedDeviceType                 = reflect.TypeOf(&TrackedDevice{})
	trackedDeviceMapping              = queries.MakeStructMapping(trackedDeviceType)
	trackedDevicePrimaryKeyMapping, _ = queries.BindMapping(trackedDeviceType, trackedDeviceMapping, trackedDevicePrimaryKeyColumns)
	trackedDeviceInsertCacheMut       sync.RWMutex
	trackedDeviceInsertCache          = make(map[string]insertCache)
	trackedDeviceUpdateCacheMut       sync.RWMutex
	trackedDeviceUpdateCache          = make(map[string]updateCache)
	trackedDeviceUpsertCacheMut       sync.RWMutex
	trackedDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trackedDeviceBeforeInsertHooks []TrackedDeviceHook
var trackedDeviceBeforeUpdateHooks []TrackedDeviceHook
var trackedDeviceBeforeDeleteHooks []TrackedDeviceHook
var trackedDeviceBeforeUpsertHooks []TrackedDeviceHook

var trackedDeviceAfterInsertHooks []TrackedDeviceHook
var trackedDeviceAfterSelectHooks []TrackedDeviceHook
var trackedDeviceAfterUpdateHooks []TrackedDeviceHook
var trackedDeviceAfterDeleteHooks []TrackedDeviceHook
var trackedDeviceAfterUpsertHooks []TrackedDeviceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TrackedDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TrackedDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TrackedDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TrackedDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TrackedDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TrackedDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TrackedDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TrackedDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TrackedDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trackedDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrackedDeviceHook registers your hook function for all future operations.
func AddTrackedDeviceHook(hookPoint boil.HookPoint, trackedDeviceHook TrackedDeviceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trackedDeviceBeforeInsertHooks = append(trackedDeviceBeforeInsertHooks, trackedDeviceHook)
	case boil.BeforeUpdateHook:
		trackedDeviceBeforeUpdateHooks = append(trackedDeviceBeforeUpdateHooks, trackedDeviceHook)
	case boil.BeforeDeleteHook:
		trackedDeviceBeforeDeleteHooks = append(trackedDeviceBeforeDeleteHooks, trackedDeviceHook)
	case boil.BeforeUpsertHook:
		trackedDeviceBeforeUpsertHooks = append(trackedDeviceBeforeUpsertHooks, trackedDeviceHook)
	case boil.AfterInsertHook:
		trackedDeviceAfterInsertHooks = append(trackedDeviceAfterInsertHooks, trackedDeviceHook)
	case boil.AfterSelectHook:
		trackedDeviceAfterSelectHooks = append(trackedDeviceAfterSelectHooks, trackedDeviceHook)
	case boil.AfterUpdateHook:
		trackedDeviceAfterUpdateHooks = append(trackedDeviceAfterUpdateHooks, trackedDeviceHook)
	case boil.AfterDeleteHook:
		trackedDeviceAfterDeleteHooks = append(trackedDeviceAfterDeleteHooks, trackedDeviceHook)
	case boil.AfterUpsertHook:
		trackedDeviceAfterUpsertHooks = append(trackedDeviceAfterUpsertHooks, trackedDeviceHook)
	}
}

// One returns a single trackedDevice record from the query.
func (q trackedDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TrackedDevice, error) {
	o := &TrackedDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tracked_device")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TrackedDevice records from the query.
func (q trackedDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrackedDeviceSlice, error) {
	var o []*TrackedDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TrackedDevice slice")
	}

	if len(trackedDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TrackedDevice records in the query.
func (q trackedDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tracked_device rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trackedDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tracked_device exists")
	}

	return count > 0, nil
}

// DeviceType pointed to by the foreign key.
func (o *TrackedDevice) DeviceType(mods ...qm.QueryMod) deviceTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeviceTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := DeviceTypes(queryMods...)
	queries.SetFrom(query.Query, "\"device_type\"")

	return query
}

// DataLogs retrieves all the data_log's DataLogs with an executor.
func (o *TrackedDevice) DataLogs(mods ...qm.QueryMod) dataLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"data_log\".\"tracked_device_id\"=?", o.ID),
	)

	query := DataLogs(queryMods...)
	queries.SetFrom(query.Query, "\"data_log\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"data_log\".*"})
	}

	return query
}

// Sensors retrieves all the sensor's Sensors with an executor.
func (o *TrackedDevice) Sensors(mods ...qm.QueryMod) sensorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sensor\".\"tracked_device_id\"=?", o.ID),
	)

	query := Sensors(queryMods...)
	queries.SetFrom(query.Query, "\"sensor\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sensor\".*"})
	}

	return query
}

// LoadDeviceType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trackedDeviceL) LoadDeviceType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedDevice interface{}, mods queries.Applicator) error {
	var slice []*TrackedDevice
	var object *TrackedDevice

	if singular {
		object = maybeTrackedDevice.(*TrackedDevice)
	} else {
		slice = *maybeTrackedDevice.(*[]*TrackedDevice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedDeviceR{}
		}
		args = append(args, object.DeviceTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedDeviceR{}
			}

			for _, a := range args {
				if a == obj.DeviceTypeID {
					continue Outer
				}
			}

			args = append(args, obj.DeviceTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`device_type`), qm.WhereIn(`device_type.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceType")
	}

	var resultSlice []*DeviceType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_type")
	}

	if len(trackedDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeviceType = foreign
		if foreign.R == nil {
			foreign.R = &deviceTypeR{}
		}
		foreign.R.TrackedDevices = append(foreign.R.TrackedDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeviceTypeID == foreign.ID {
				local.R.DeviceType = foreign
				if foreign.R == nil {
					foreign.R = &deviceTypeR{}
				}
				foreign.R.TrackedDevices = append(foreign.R.TrackedDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadDataLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackedDeviceL) LoadDataLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedDevice interface{}, mods queries.Applicator) error {
	var slice []*TrackedDevice
	var object *TrackedDevice

	if singular {
		object = maybeTrackedDevice.(*TrackedDevice)
	} else {
		slice = *maybeTrackedDevice.(*[]*TrackedDevice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedDeviceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedDeviceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`data_log`), qm.WhereIn(`data_log.tracked_device_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_log")
	}

	var resultSlice []*DataLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_log")
	}

	if len(dataLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DataLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataLogR{}
			}
			foreign.R.TrackedDevice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TrackedDeviceID {
				local.R.DataLogs = append(local.R.DataLogs, foreign)
				if foreign.R == nil {
					foreign.R = &dataLogR{}
				}
				foreign.R.TrackedDevice = local
				break
			}
		}
	}

	return nil
}

// LoadSensors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (trackedDeviceL) LoadSensors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrackedDevice interface{}, mods queries.Applicator) error {
	var slice []*TrackedDevice
	var object *TrackedDevice

	if singular {
		object = maybeTrackedDevice.(*TrackedDevice)
	} else {
		slice = *maybeTrackedDevice.(*[]*TrackedDevice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trackedDeviceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trackedDeviceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`sensor`), qm.WhereIn(`sensor.tracked_device_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sensor")
	}

	var resultSlice []*Sensor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sensor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sensor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sensor")
	}

	if len(sensorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sensors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sensorR{}
			}
			foreign.R.TrackedDevice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TrackedDeviceID) {
				local.R.Sensors = append(local.R.Sensors, foreign)
				if foreign.R == nil {
					foreign.R = &sensorR{}
				}
				foreign.R.TrackedDevice = local
				break
			}
		}
	}

	return nil
}

// SetDeviceType of the trackedDevice to the related item.
// Sets o.R.DeviceType to related.
// Adds o to related.R.TrackedDevices.
func (o *TrackedDevice) SetDeviceType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeviceType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tracked_device\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"device_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, trackedDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeviceTypeID = related.ID
	if o.R == nil {
		o.R = &trackedDeviceR{
			DeviceType: related,
		}
	} else {
		o.R.DeviceType = related
	}

	if related.R == nil {
		related.R = &deviceTypeR{
			TrackedDevices: TrackedDeviceSlice{o},
		}
	} else {
		related.R.TrackedDevices = append(related.R.TrackedDevices, o)
	}

	return nil
}

// AddDataLogs adds the given related objects to the existing relationships
// of the tracked_device, optionally inserting them as new records.
// Appends related to o.R.DataLogs.
// Sets related.R.TrackedDevice appropriately.
func (o *TrackedDevice) AddDataLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TrackedDeviceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"data_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tracked_device_id"}),
				strmangle.WhereClause("\"", "\"", 2, dataLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TrackedDeviceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &trackedDeviceR{
			DataLogs: related,
		}
	} else {
		o.R.DataLogs = append(o.R.DataLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataLogR{
				TrackedDevice: o,
			}
		} else {
			rel.R.TrackedDevice = o
		}
	}
	return nil
}

// AddSensors adds the given related objects to the existing relationships
// of the tracked_device, optionally inserting them as new records.
// Appends related to o.R.Sensors.
// Sets related.R.TrackedDevice appropriately.
func (o *TrackedDevice) AddSensors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Sensor) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TrackedDeviceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sensor\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tracked_device_id"}),
				strmangle.WhereClause("\"", "\"", 2, sensorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TrackedDeviceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &trackedDeviceR{
			Sensors: related,
		}
	} else {
		o.R.Sensors = append(o.R.Sensors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sensorR{
				TrackedDevice: o,
			}
		} else {
			rel.R.TrackedDevice = o
		}
	}
	return nil
}

// SetSensors removes all previously related items of the
// tracked_device replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TrackedDevice's Sensors accordingly.
// Replaces o.R.Sensors with related.
// Sets related.R.TrackedDevice's Sensors accordingly.
func (o *TrackedDevice) SetSensors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Sensor) error {
	query := "update \"sensor\" set \"tracked_device_id\" = null where \"tracked_device_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Sensors {
			queries.SetScanner(&rel.TrackedDeviceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TrackedDevice = nil
		}

		o.R.Sensors = nil
	}
	return o.AddSensors(ctx, exec, insert, related...)
}

// RemoveSensors relationships from objects passed in.
// Removes related items from R.Sensors (uses pointer comparison, removal does not keep order)
// Sets related.R.TrackedDevice.
func (o *TrackedDevice) RemoveSensors(ctx context.Context, exec boil.ContextExecutor, related ...*Sensor) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TrackedDeviceID, nil)
		if rel.R != nil {
			rel.R.TrackedDevice = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tracked_device_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sensors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sensors)
			if ln > 1 && i < ln-1 {
				o.R.Sensors[i] = o.R.Sensors[ln-1]
			}
			o.R.Sensors = o.R.Sensors[:ln-1]
			break
		}
	}

	return nil
}

// TrackedDevices retrieves all the records using an executor.
func TrackedDevices(mods ...qm.QueryMod) trackedDeviceQuery {
	mods = append(mods, qm.From("\"tracked_device\""))
	return trackedDeviceQuery{NewQuery(mods...)}
}

// FindTrackedDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrackedDevice(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TrackedDevice, error) {
	trackedDeviceObj := &TrackedDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tracked_device\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trackedDeviceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tracked_device")
	}

	return trackedDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TrackedDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracked_device provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackedDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trackedDeviceInsertCacheMut.RLock()
	cache, cached := trackedDeviceInsertCache[key]
	trackedDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trackedDeviceAllColumns,
			trackedDeviceColumnsWithDefault,
			trackedDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trackedDeviceType, trackedDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trackedDeviceType, trackedDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tracked_device\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tracked_device\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tracked_device")
	}

	if !cached {
		trackedDeviceInsertCacheMut.Lock()
		trackedDeviceInsertCache[key] = cache
		trackedDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TrackedDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TrackedDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trackedDeviceUpdateCacheMut.RLock()
	cache, cached := trackedDeviceUpdateCache[key]
	trackedDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trackedDeviceAllColumns,
			trackedDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tracked_device, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tracked_device\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trackedDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trackedDeviceType, trackedDeviceMapping, append(wl, trackedDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tracked_device row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tracked_device")
	}

	if !cached {
		trackedDeviceUpdateCacheMut.Lock()
		trackedDeviceUpdateCache[key] = cache
		trackedDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trackedDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tracked_device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tracked_device")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrackedDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tracked_device\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trackedDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trackedDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trackedDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TrackedDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tracked_device provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trackedDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trackedDeviceUpsertCacheMut.RLock()
	cache, cached := trackedDeviceUpsertCache[key]
	trackedDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trackedDeviceAllColumns,
			trackedDeviceColumnsWithDefault,
			trackedDeviceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trackedDeviceAllColumns,
			trackedDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tracked_device, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trackedDevicePrimaryKeyColumns))
			copy(conflict, trackedDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tracked_device\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trackedDeviceType, trackedDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trackedDeviceType, trackedDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tracked_device")
	}

	if !cached {
		trackedDeviceUpsertCacheMut.Lock()
		trackedDeviceUpsertCache[key] = cache
		trackedDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TrackedDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TrackedDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TrackedDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trackedDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"tracked_device\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tracked_device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tracked_device")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trackedDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trackedDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tracked_device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracked_device")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrackedDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trackedDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tracked_device\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackedDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trackedDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tracked_device")
	}

	if len(trackedDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TrackedDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrackedDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrackedDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrackedDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trackedDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tracked_device\".* FROM \"tracked_device\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trackedDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrackedDeviceSlice")
	}

	*o = slice

	return nil
}

// TrackedDeviceExists checks if the TrackedDevice row exists.
func TrackedDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tracked_device\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tracked_device exists")
	}

	return exists, nil
}
