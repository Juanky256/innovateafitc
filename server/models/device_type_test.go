// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeviceTypes(t *testing.T) {
	t.Parallel()

	query := DeviceTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeviceTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeviceTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeviceTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeviceType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeviceTypeExists to return true, but got false.")
	}
}

func testDeviceTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deviceTypeFound, err := FindDeviceType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deviceTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeviceTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeviceTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeviceTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeviceTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeviceTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deviceTypeOne := &DeviceType{}
	deviceTypeTwo := &DeviceType{}
	if err = randomize.Struct(seed, deviceTypeOne, deviceTypeDBTypes, false, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTypeTwo, deviceTypeDBTypes, false, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deviceTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeviceTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeviceTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deviceTypeOne := &DeviceType{}
	deviceTypeTwo := &DeviceType{}
	if err = randomize.Struct(seed, deviceTypeOne, deviceTypeDBTypes, false, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTypeTwo, deviceTypeDBTypes, false, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deviceTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deviceTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func deviceTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceType) error {
	*o = DeviceType{}
	return nil
}

func testDeviceTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeviceType{}
	o := &DeviceType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeviceType object: %s", err)
	}

	AddDeviceTypeHook(boil.BeforeInsertHook, deviceTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deviceTypeBeforeInsertHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.AfterInsertHook, deviceTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deviceTypeAfterInsertHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.AfterSelectHook, deviceTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deviceTypeAfterSelectHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.BeforeUpdateHook, deviceTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deviceTypeBeforeUpdateHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.AfterUpdateHook, deviceTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deviceTypeAfterUpdateHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.BeforeDeleteHook, deviceTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deviceTypeBeforeDeleteHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.AfterDeleteHook, deviceTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deviceTypeAfterDeleteHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.BeforeUpsertHook, deviceTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deviceTypeBeforeUpsertHooks = []DeviceTypeHook{}

	AddDeviceTypeHook(boil.AfterUpsertHook, deviceTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deviceTypeAfterUpsertHooks = []DeviceTypeHook{}
}

func testDeviceTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deviceTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceTypeToManyTrackedDevices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeviceType
	var b, c TrackedDevice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, trackedDeviceDBTypes, false, trackedDeviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DeviceTypeID = a.ID
	c.DeviceTypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TrackedDevices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DeviceTypeID == b.DeviceTypeID {
			bFound = true
		}
		if v.DeviceTypeID == c.DeviceTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DeviceTypeSlice{&a}
	if err = a.L.LoadTrackedDevices(ctx, tx, false, (*[]*DeviceType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TrackedDevices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TrackedDevices = nil
	if err = a.L.LoadTrackedDevices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TrackedDevices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDeviceTypeToManyAddOpTrackedDevices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeviceType
	var b, c, d, e TrackedDevice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceTypeDBTypes, false, strmangle.SetComplement(deviceTypePrimaryKeyColumns, deviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TrackedDevice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, trackedDeviceDBTypes, false, strmangle.SetComplement(trackedDevicePrimaryKeyColumns, trackedDeviceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TrackedDevice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTrackedDevices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DeviceTypeID {
			t.Error("foreign key was wrong value", a.ID, first.DeviceTypeID)
		}
		if a.ID != second.DeviceTypeID {
			t.Error("foreign key was wrong value", a.ID, second.DeviceTypeID)
		}

		if first.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TrackedDevices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TrackedDevices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TrackedDevices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDeviceTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeviceTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeviceTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeviceTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deviceTypeDBTypes = map[string]string{`ID`: `bigint`, `DeviceName`: `character varying`}
	_                 = bytes.MinRead
)

func testDeviceTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deviceTypeAllColumns) == len(deviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeviceTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deviceTypeAllColumns) == len(deviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeviceType{}
	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceTypeDBTypes, true, deviceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deviceTypeAllColumns, deviceTypePrimaryKeyColumns) {
		fields = deviceTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			deviceTypeAllColumns,
			deviceTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeviceTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeviceTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(deviceTypeAllColumns) == len(deviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeviceType{}
	if err = randomize.Struct(seed, &o, deviceTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeviceType: %s", err)
	}

	count, err := DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deviceTypeDBTypes, false, deviceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeviceType: %s", err)
	}

	count, err = DeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
