// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Sensor is an object representing the database table.
type Sensor struct {
	ID              string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TrackedDeviceID null.Int64 `boil:"tracked_device_id" json:"tracked_device_id,omitempty" toml:"tracked_device_id" yaml:"tracked_device_id,omitempty"`
	BatStatus       null.Int   `boil:"bat_status" json:"bat_status,omitempty" toml:"bat_status" yaml:"bat_status,omitempty"`

	R *sensorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sensorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SensorColumns = struct {
	ID              string
	TrackedDeviceID string
	BatStatus       string
}{
	ID:              "id",
	TrackedDeviceID: "tracked_device_id",
	BatStatus:       "bat_status",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SensorWhere = struct {
	ID              whereHelperstring
	TrackedDeviceID whereHelpernull_Int64
	BatStatus       whereHelpernull_Int
}{
	ID:              whereHelperstring{field: "\"sensor\".\"id\""},
	TrackedDeviceID: whereHelpernull_Int64{field: "\"sensor\".\"tracked_device_id\""},
	BatStatus:       whereHelpernull_Int{field: "\"sensor\".\"bat_status\""},
}

// SensorRels is where relationship names are stored.
var SensorRels = struct {
	TrackedDevice string
}{
	TrackedDevice: "TrackedDevice",
}

// sensorR is where relationships are stored.
type sensorR struct {
	TrackedDevice *TrackedDevice
}

// NewStruct creates a new relationship struct
func (*sensorR) NewStruct() *sensorR {
	return &sensorR{}
}

// sensorL is where Load methods for each relationship are stored.
type sensorL struct{}

var (
	sensorAllColumns            = []string{"id", "tracked_device_id", "bat_status"}
	sensorColumnsWithoutDefault = []string{"id", "tracked_device_id", "bat_status"}
	sensorColumnsWithDefault    = []string{}
	sensorPrimaryKeyColumns     = []string{"id"}
)

type (
	// SensorSlice is an alias for a slice of pointers to Sensor.
	// This should generally be used opposed to []Sensor.
	SensorSlice []*Sensor
	// SensorHook is the signature for custom Sensor hook methods
	SensorHook func(context.Context, boil.ContextExecutor, *Sensor) error

	sensorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sensorType                 = reflect.TypeOf(&Sensor{})
	sensorMapping              = queries.MakeStructMapping(sensorType)
	sensorPrimaryKeyMapping, _ = queries.BindMapping(sensorType, sensorMapping, sensorPrimaryKeyColumns)
	sensorInsertCacheMut       sync.RWMutex
	sensorInsertCache          = make(map[string]insertCache)
	sensorUpdateCacheMut       sync.RWMutex
	sensorUpdateCache          = make(map[string]updateCache)
	sensorUpsertCacheMut       sync.RWMutex
	sensorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sensorBeforeInsertHooks []SensorHook
var sensorBeforeUpdateHooks []SensorHook
var sensorBeforeDeleteHooks []SensorHook
var sensorBeforeUpsertHooks []SensorHook

var sensorAfterInsertHooks []SensorHook
var sensorAfterSelectHooks []SensorHook
var sensorAfterUpdateHooks []SensorHook
var sensorAfterDeleteHooks []SensorHook
var sensorAfterUpsertHooks []SensorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sensor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sensor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sensor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sensor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sensor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sensor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sensor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sensor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sensor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sensorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSensorHook registers your hook function for all future operations.
func AddSensorHook(hookPoint boil.HookPoint, sensorHook SensorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sensorBeforeInsertHooks = append(sensorBeforeInsertHooks, sensorHook)
	case boil.BeforeUpdateHook:
		sensorBeforeUpdateHooks = append(sensorBeforeUpdateHooks, sensorHook)
	case boil.BeforeDeleteHook:
		sensorBeforeDeleteHooks = append(sensorBeforeDeleteHooks, sensorHook)
	case boil.BeforeUpsertHook:
		sensorBeforeUpsertHooks = append(sensorBeforeUpsertHooks, sensorHook)
	case boil.AfterInsertHook:
		sensorAfterInsertHooks = append(sensorAfterInsertHooks, sensorHook)
	case boil.AfterSelectHook:
		sensorAfterSelectHooks = append(sensorAfterSelectHooks, sensorHook)
	case boil.AfterUpdateHook:
		sensorAfterUpdateHooks = append(sensorAfterUpdateHooks, sensorHook)
	case boil.AfterDeleteHook:
		sensorAfterDeleteHooks = append(sensorAfterDeleteHooks, sensorHook)
	case boil.AfterUpsertHook:
		sensorAfterUpsertHooks = append(sensorAfterUpsertHooks, sensorHook)
	}
}

// One returns a single sensor record from the query.
func (q sensorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sensor, error) {
	o := &Sensor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sensor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sensor records from the query.
func (q sensorQuery) All(ctx context.Context, exec boil.ContextExecutor) (SensorSlice, error) {
	var o []*Sensor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sensor slice")
	}

	if len(sensorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sensor records in the query.
func (q sensorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sensor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sensorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sensor exists")
	}

	return count > 0, nil
}

// TrackedDevice pointed to by the foreign key.
func (o *Sensor) TrackedDevice(mods ...qm.QueryMod) trackedDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TrackedDeviceID),
	}

	queryMods = append(queryMods, mods...)

	query := TrackedDevices(queryMods...)
	queries.SetFrom(query.Query, "\"tracked_device\"")

	return query
}

// LoadTrackedDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sensorL) LoadTrackedDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSensor interface{}, mods queries.Applicator) error {
	var slice []*Sensor
	var object *Sensor

	if singular {
		object = maybeSensor.(*Sensor)
	} else {
		slice = *maybeSensor.(*[]*Sensor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sensorR{}
		}
		if !queries.IsNil(object.TrackedDeviceID) {
			args = append(args, object.TrackedDeviceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sensorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TrackedDeviceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TrackedDeviceID) {
				args = append(args, obj.TrackedDeviceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`tracked_device`), qm.WhereIn(`tracked_device.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TrackedDevice")
	}

	var resultSlice []*TrackedDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TrackedDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tracked_device")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracked_device")
	}

	if len(sensorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TrackedDevice = foreign
		if foreign.R == nil {
			foreign.R = &trackedDeviceR{}
		}
		foreign.R.Sensors = append(foreign.R.Sensors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TrackedDeviceID, foreign.ID) {
				local.R.TrackedDevice = foreign
				if foreign.R == nil {
					foreign.R = &trackedDeviceR{}
				}
				foreign.R.Sensors = append(foreign.R.Sensors, local)
				break
			}
		}
	}

	return nil
}

// SetTrackedDevice of the sensor to the related item.
// Sets o.R.TrackedDevice to related.
// Adds o to related.R.Sensors.
func (o *Sensor) SetTrackedDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TrackedDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sensor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tracked_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, sensorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TrackedDeviceID, related.ID)
	if o.R == nil {
		o.R = &sensorR{
			TrackedDevice: related,
		}
	} else {
		o.R.TrackedDevice = related
	}

	if related.R == nil {
		related.R = &trackedDeviceR{
			Sensors: SensorSlice{o},
		}
	} else {
		related.R.Sensors = append(related.R.Sensors, o)
	}

	return nil
}

// RemoveTrackedDevice relationship.
// Sets o.R.TrackedDevice to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Sensor) RemoveTrackedDevice(ctx context.Context, exec boil.ContextExecutor, related *TrackedDevice) error {
	var err error

	queries.SetScanner(&o.TrackedDeviceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tracked_device_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TrackedDevice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Sensors {
		if queries.Equal(o.TrackedDeviceID, ri.TrackedDeviceID) {
			continue
		}

		ln := len(related.R.Sensors)
		if ln > 1 && i < ln-1 {
			related.R.Sensors[i] = related.R.Sensors[ln-1]
		}
		related.R.Sensors = related.R.Sensors[:ln-1]
		break
	}
	return nil
}

// Sensors retrieves all the records using an executor.
func Sensors(mods ...qm.QueryMod) sensorQuery {
	mods = append(mods, qm.From("\"sensor\""))
	return sensorQuery{NewQuery(mods...)}
}

// FindSensor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSensor(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Sensor, error) {
	sensorObj := &Sensor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sensor\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sensorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sensor")
	}

	return sensorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sensor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sensor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sensorInsertCacheMut.RLock()
	cache, cached := sensorInsertCache[key]
	sensorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sensorAllColumns,
			sensorColumnsWithDefault,
			sensorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sensorType, sensorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sensorType, sensorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sensor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sensor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sensor")
	}

	if !cached {
		sensorInsertCacheMut.Lock()
		sensorInsertCache[key] = cache
		sensorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sensor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sensor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sensorUpdateCacheMut.RLock()
	cache, cached := sensorUpdateCache[key]
	sensorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sensorAllColumns,
			sensorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sensor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sensor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sensorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sensorType, sensorMapping, append(wl, sensorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sensor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sensor")
	}

	if !cached {
		sensorUpdateCacheMut.Lock()
		sensorUpdateCache[key] = cache
		sensorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sensorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sensor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sensor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SensorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sensor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sensorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sensor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sensor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sensor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sensor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sensorUpsertCacheMut.RLock()
	cache, cached := sensorUpsertCache[key]
	sensorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sensorAllColumns,
			sensorColumnsWithDefault,
			sensorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sensorAllColumns,
			sensorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sensor, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sensorPrimaryKeyColumns))
			copy(conflict, sensorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sensor\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sensorType, sensorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sensorType, sensorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sensor")
	}

	if !cached {
		sensorUpsertCacheMut.Lock()
		sensorUpsertCache[key] = cache
		sensorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sensor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sensor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sensor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sensorPrimaryKeyMapping)
	sql := "DELETE FROM \"sensor\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sensor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sensor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sensorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sensorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sensor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sensor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SensorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sensorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sensor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sensor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sensor")
	}

	if len(sensorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sensor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSensor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SensorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SensorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sensor\".* FROM \"sensor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SensorSlice")
	}

	*o = slice

	return nil
}

// SensorExists checks if the Sensor row exists.
func SensorExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sensor\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sensor exists")
	}

	return exists, nil
}
